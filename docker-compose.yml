# -----------------------------------------------------------------------------
# Automation / AI toolkit – Docker Compose stack
# -----------------------------------------------------------------------------

x-healthcheck: &default-healthcheck
  interval: 30s    # probe every 30 seconds
  timeout: 3s      # mark failure if response >3 s
  retries: 3       # need 3 failures to go unhealthy
  start_period: 10s # grace period after container start

networks:
  internal:
    driver: overlay

volumes:
  n8n_storage:
  qdrant_storage:
  langfuse_storage:
  pgdata_n8n:
  pgdata_langfuse:

# -----------------------------------------------------------------------------
# Docker Secrets – keep credentials out of the compose file.
# -----------------------------------------------------------------------------
secrets:
  n8n_basic_auth_user:
    external: true
  n8n_basic_auth_password:
    external: true
  n8n_encryption_key:
    external: true
  langfuse_nextauth_secret:
    external: true
  postgres_n8n_password:
    external: true
  postgres_langfuse_password:
    external: true

services:
  # ---------------------------------------------------------------------------
  # Postgres for n8n
  # ---------------------------------------------------------------------------
  postgres_n8n:
    image: postgres:17-alpine3.22
    environment:
      POSTGRES_USER: n8n
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_n8n_password
      POSTGRES_DB: n8n
    volumes:
      - pgdata_n8n:/var/lib/postgresql/data
    secrets: [postgres_n8n_password]
    networks: [internal]
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
    deploy:
      resources:
        limits: {cpus: "1.0", memory: 2g}

  # ---------------------------------------------------------------------------
  # Postgres for Langfuse
  # ---------------------------------------------------------------------------
  postgres_langfuse:
    image: postgres:17-alpine3.22
    environment:
      POSTGRES_USER: langfuse
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_langfuse_password
      POSTGRES_DB: langfuse
    volumes:
      - pgdata_langfuse:/var/lib/postgresql/data
    secrets: [postgres_langfuse_password]
    networks: [internal]
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
    deploy:
      resources:
        limits: {cpus: "1.0", memory: 2g}

  # ---------------------------------------------------------------------------
  # n8n – workflow automation
  # ---------------------------------------------------------------------------
  n8n:
    image: n8nio/n8n:1.99.1
    ports: ["5678:5678"]
    environment:
      DB_TYPE: postgres
      DB_POSTGRESDB_HOST: postgres_n8n
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: n8n
      DB_POSTGRESDB_USER: n8n
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER_FILE: /run/secrets/n8n_basic_auth_user
      N8N_BASIC_AUTH_PASSWORD_FILE: /run/secrets/n8n_basic_auth_password
      N8N_ENCRYPTION_KEY_FILE: /run/secrets/n8n_encryption_key
      N8N_HOST: n8n.local
      WEBHOOK_TUNNEL_URL: https://n8n.local/
      GENERIC_TIMEZONE: UTC
    volumes:
      - n8n_storage:/home/node/.n8n
    depends_on:
      - postgres_n8n
      - qdrant
    secrets:
      - postgres_n8n_password
    extra_hosts:
      - "host.docker.internal:host-gateway"  # reach host‑side Ollama
    entrypoint: >
      /bin/sh -c '
        export DB_POSTGRESDB_PASSWORD="$$(cat /run/secrets/postgres_n8n_password)";
        exec /docker-entrypoint.sh n8n'
    networks: [internal]
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-fsSL", "http://localhost:5678/health"]
    deploy:
      resources:
        limits: {cpus: "1.0", memory: 1g}

  # ---------------------------------------------------------------------------
  # Qdrant – vector database
  # ---------------------------------------------------------------------------
  qdrant:
    image: qdrant/qdrant:v1.14.1
    ports: ["6333:6333"]
    volumes:
      - qdrant_storage:/qdrant/storage
    networks: [internal]
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-fsSL", "http://localhost:6333/healthz"]
    deploy:
      resources:
        limits: {cpus: "2.0", memory: 4g}


  # ---------------------------------------------------------------------------
  # Prometheus – metrics scraper
  # ---------------------------------------------------------------------------
  prometheus:
    image: prom/prometheus:v3.4.1
    ports: ["9090:9090"]
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks: [internal]
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
    deploy:
      resources:
        limits: {cpus: "1.0", memory: 1g}

  # ---------------------------------------------------------------------------
  # Langfuse – LLM observability
  # ---------------------------------------------------------------------------
  langfuse:
    image: langfuse/langfuse:3.73.1
    ports: ["3000:3000"]
    environment:
      NEXTAUTH_SECRET_FILE: /run/secrets/langfuse_nextauth_secret
      NEXTAUTH_URL: http://localhost:3000
      NODE_ENV: production
    volumes:
      - langfuse_storage:/data
    secrets:
      - langfuse_nextauth_secret
      - postgres_langfuse_password
    depends_on:
      - postgres_langfuse
    extra_hosts:
      - "host.docker.internal:host-gateway"  # reach host‑side Ollama
    entrypoint: >
      /bin/sh -c '
        export DATABASE_URL="postgres://langfuse:$$(cat /run/secrets/postgres_langfuse_password)@postgres_langfuse:5432/langfuse";
        exec /entrypoint.sh'
    networks: [internal]
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-fsSL", "http://localhost:3000/api/health"]
    deploy:
      resources:
        limits: {cpus: "1.0", memory: 2g}
