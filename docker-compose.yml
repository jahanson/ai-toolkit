# -----------------------------------------------------------------------------
# Automation / AI toolkit – Docker Compose stack
# -----------------------------------------------------------------------------

x-healthcheck: &default-healthcheck
  interval: 30s # probe every 30 seconds
  timeout: 3s # mark failure if response >3 s
  retries: 3 # need 3 failures to go unhealthy
  start_period: 10s # grace period after container start

networks:
  internal:
    driver: overlay

volumes:
  n8n_storage:
  qdrant_storage:
  langfuse_storage:
  pgdata_n8n:
  pgdata_langfuse:
  clickhouse_data:

# -----------------------------------------------------------------------------
# Docker Secrets – keep credentials out of the compose file.
# -----------------------------------------------------------------------------
secrets:
  n8n_basic_auth_user:
    external: true
  n8n_basic_auth_password:
    external: true
  n8n_encryption_key:
    external: true
  langfuse_nextauth_secret:
    external: true
  postgres_n8n_password:
    external: true
  postgres_langfuse_password:
    external: true
  clickhouse_password:
    external: true
  langfuse_salt:
    external: true

services:
  # ---------------------------------------------------------------------------
  # Postgres for n8n
  # ---------------------------------------------------------------------------
  postgres_n8n:
    image: postgres:17-alpine3.22
    environment:
      POSTGRES_USER: n8n
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_n8n_password
      POSTGRES_DB: n8n
    volumes:
      - pgdata_n8n:/var/lib/postgresql/data
    secrets: [ postgres_n8n_password ]
    networks: [ internal ]
    healthcheck:
      <<: *default-healthcheck
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
    deploy:
      resources:
        limits: { cpus: "1.0", memory: 2g }

  # ---------------------------------------------------------------------------
  # Postgres for Langfuse
  # ---------------------------------------------------------------------------
  postgres_langfuse:
    image: postgres:17-alpine3.22
    environment:
      POSTGRES_USER: langfuse
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_langfuse_password
      POSTGRES_DB: langfuse
    volumes:
      - pgdata_langfuse:/var/lib/postgresql/data
    secrets: [ postgres_langfuse_password ]
    networks: [ internal ]
    healthcheck:
      <<: *default-healthcheck
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
    deploy:
      resources:
        limits: { cpus: "1.0", memory: 2g }

  # ---------------------------------------------------------------------------
  # n8n – workflow automation
  # ---------------------------------------------------------------------------
  n8n:
    image: n8nio/n8n:1.99.1
    ports: [ "5678:5678" ]

    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres_n8n
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: n8n
      DB_POSTGRESDB_USER: n8n
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER_FILE: /run/secrets/n8n_basic_auth_user
      N8N_BASIC_AUTH_PASSWORD_FILE: /run/secrets/n8n_basic_auth_password
      N8N_ENCRYPTION_KEY_FILE: /run/secrets/n8n_encryption_key
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: "true"
      N8N_METRICS: "false"
      N8N_PERSONALIZATION_ENABLED: "false"
      N8N_VERSION_NOTIFICATIONS_ENABLED: "false"
      N8N_DIAGNOSTICS_ENABLED: "false"
      GENERIC_TIMEZONE: UTC
    volumes:
      - n8n_storage:/home/node/.n8n
    depends_on:
      - postgres_n8n
      - qdrant
    secrets:
      - n8n_basic_auth_user
      - n8n_basic_auth_password
      - n8n_encryption_key
      - postgres_n8n_password
    extra_hosts:
      - "host.docker.internal:host-gateway" # reach host‑side Ollama
    entrypoint: >
      sh -c '
        export DB_POSTGRESDB_PASSWORD="$$(cat /run/secrets/postgres_n8n_password)" &&
        exec tini -- n8n'
    networks: [ internal ]
    deploy:
      labels:
        homepage.group: AI Toolkit
        homepage.name: n8n
        homepage.icon: n8n.png
        homepage.href: http://localhost:5678
        homepage.description: Workflow automation platform
      resources:
        limits: { cpus: "1.0", memory: 1g }

  # ---------------------------------------------------------------------------
  # Qdrant – vector database
  # ---------------------------------------------------------------------------
  qdrant:
    image: qdrant/qdrant:v1.14.1
    ports: [ "6333:6333" ]
    volumes:
      - qdrant_storage:/qdrant/storage
    networks: [ internal ]
    deploy:
      labels:
        homepage.group: AI Toolkit
        homepage.name: Qdrant
        homepage.icon: /images/qdrant.svg
        homepage.href: http://localhost:6333
        homepage.description: Vector database
      resources:
        limits: { cpus: "2.0", memory: 4g }

  # ---------------------------------------------------------------------------
  # Prometheus – metrics scraper
  # ---------------------------------------------------------------------------
  prometheus:
    image: prom/prometheus:v3.4.1
    ports: [ "9090:9090" ]
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks: [ internal ]
    healthcheck:
      <<: *default-healthcheck
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy" ]
    deploy:
      labels:
        homepage.group: AI Toolkit
        homepage.name: Prometheus
        homepage.icon: prometheus.png
        homepage.href: http://localhost:9090
        homepage.description: Metrics collection and monitoring
      resources:
        limits: { cpus: "1.0", memory: 1g }

  # ---------------------------------------------------------------------------
  # ClickHouse – for Langfuse analytics
  # ---------------------------------------------------------------------------
  clickhouse:
    image: clickhouse/clickhouse-server:24.12.6.70-alpine
    ports:
      - "9000:9000" # TCP port for migrations
      - "8123:8123" # HTTP port for queries
    environment:
      CLICKHOUSE_DB: langfuse
      CLICKHOUSE_USER: langfuse
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    secrets:
      - clickhouse_password
    entrypoint: >
      sh -c '
        export CLICKHOUSE_PASSWORD="$$(cat /run/secrets/clickhouse_password)" &&
        exec /entrypoint.sh'
    networks: [ internal ]
    deploy:
      labels:
        homepage.group: AI Toolkit
        homepage.name: ClickHouse
        homepage.icon: clickhouse.png
        homepage.href: http://localhost:8123
        homepage.description: Analytics database for Langfuse
      resources:
        limits: { cpus: "1.0", memory: 2g }

  # ---------------------------------------------------------------------------
  # Langfuse – LLM observability
  # ---------------------------------------------------------------------------
  langfuse:
    image: langfuse/langfuse:3.73.1
    ports: [ "3000:3000" ]
    environment:
      NEXTAUTH_URL: http://localhost:3000
      NODE_ENV: production
      LANGFUSE_DEFAULT_PROJECT_ROLE: "ADMIN"
      LANGFUSE_DEFAULT_PROJECT_ID: "default"
      LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES: "true"
    volumes:
      - langfuse_storage:/data
    secrets:
      - langfuse_nextauth_secret
      - postgres_langfuse_password
      - clickhouse_password
      - langfuse_salt
    depends_on:
      - postgres_langfuse
    extra_hosts:
      - "host.docker.internal:host-gateway" # reach host‑side Ollama
    entrypoint: >
      sh -c '
        echo "Reading secrets..." &&
        PG_PASSWORD=$$(cat /run/secrets/postgres_langfuse_password) &&
        CH_PASSWORD=$$(cat /run/secrets/clickhouse_password) &&
        NEXTAUTH_SECRET=$$(cat /run/secrets/langfuse_nextauth_secret) &&
        SALT=$$(cat /run/secrets/langfuse_salt) &&
        echo "Secrets read successfully" &&
        export DATABASE_URL="postgres://langfuse:$$PG_PASSWORD@postgres_langfuse:5432/langfuse" &&
        export CLICKHOUSE_URL="http://langfuse:$$CH_PASSWORD@clickhouse:8123" &&
        export CLICKHOUSE_MIGRATION_URL="clickhouse://langfuse:$$CH_PASSWORD@clickhouse:9000" &&
        export CLICKHOUSE_USER="langfuse" &&
        export CLICKHOUSE_PASSWORD="$$CH_PASSWORD" &&
        export CLICKHOUSE_CLUSTER_ENABLED="false" &&
        export NEXTAUTH_SECRET="$$NEXTAUTH_SECRET" &&
        export SALT="$$SALT" &&
        echo "Environment variables set" &&
        echo "Starting langfuse..." &&
        if [ -n "$$NEXT_PUBLIC_LANGFUSE_CLOUD_REGION" ]; then
          exec node --import dd-trace/initialize.mjs ./web/server.js --keepAliveTimeout 110000
        else
          exec node ./web/server.js --keepAliveTimeout 110000
        fi'
    networks: [ internal ]
    deploy:
      labels:
        homepage.group: AI Toolkit
        homepage.name: Langfuse
        homepage.icon: /images/langfuse.svg
        homepage.href: http://localhost:3000
        homepage.description: LLM observability and tracing
      resources:
        limits: { cpus: "1.0", memory: 2g }

  # ---------------------------------------------------------------------------
  # Dashboard Services - Compare different dashboard solutions
  # ---------------------------------------------------------------------------

  # Homepage - Modern, customizable dashboard
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    ports: [ "3001:3000" ]
    environment:
      HOMEPAGE_ALLOWED_HOSTS: "localhost:3001,127.0.0.1:3001"
    volumes:
      - ./apps/homepage/services.yaml:/app/config/services.yaml:ro
      - ./apps/homepage/widgets.yaml:/app/config/widgets.yaml:ro
      - ./apps/homepage/settings.yaml:/app/config/settings.yaml:ro
      - ./apps/homepage/docker.yaml:/app/config/docker.yaml:ro
      - ./apps/homepage/bookmarks.yaml:/app/config/bookmarks.yaml:ro
      - ./assets:/app/public/images:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks: [ internal ]
    deploy:
      placement:
        constraints:
          - node.role == manager
      resources:
        limits: { cpus: "0.5", memory: 512m }

